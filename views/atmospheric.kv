#:import AutoPilotInput widgets.AutoPilotInput

<Atmospheric>:
    name: 'atmospheric'

    BoxLayout:
        BoxLayout:
            size_hint_x: .2
            orientation: 'vertical'

            Label:
                text: 'Throttle:'
                size_hint_y: .1
            Slider:
                orientation: 'vertical'
                max: 1
                value: root.throttle
                on_value: root.throttle = self.value

        BoxLayout:
            orientation: 'vertical'
            GridLayout:
                cols: 2

                TelemetryLabel:
                    text: 'Altitude:\n{:.2f}m'.format(root.altitude)

                TelemetryLabel:
                    text: 'Surface altitude:\n{:.2f}m'.format(root.surface_altitude)

                TelemetryLabel:
                    text: 'Speed:\n{:.2f}m/s'.format(root.speed)

                TelemetryLabel:
                    text: 'Heading:\n{:.2f}°'.format(root.heading)

                TelemetryLabel:
                    text: 'Pitch:\n{:.2f}°'.format(root.pitch)

                TelemetryLabel:
                    text: 'Roll:\n{:.2f}°'.format(root.roll)

                TelemetryLabel:
                    text: str(root.latitude) and 'Latitude:\n{}°{:02d}"{:02d}\' {}'.format(*root.latitude_dms())

                TelemetryLabel:
                    text: str(root.longitude) and 'Longitude:\n{}°{:02d}"{:02d}\' {}'.format(*root.longitude_dms())

                AutoPilotLayout:
                    text: 'Set heading:'
                    target: 'target_heading'
                    root: root

                AutoPilotLayout:
                    text: 'Set pitch:'
                    target: 'target_pitch'
                    root: root

                AutoPilotLayout:
                    text: 'Set roll:'
                    target: 'target_roll'
                    root: root

                ToggleButton:
                    text: 'Autopilot {}engaged'.format('' if self.state == 'down' else 'dis')
                    state: 'down' if root.autopilot_engaged else 'normal'
                    on_state: root.autopilot_engaged = True if self.state == 'down' else False

                ToggleButton:
                    text: 'Gear {}'.format('down' if self.state == 'down' else 'up')
                    state: 'down' if root.gear else 'normal'
                    on_state: root.gear = True if self.state == 'down' else False

                ToggleButton:
                    text: 'Lights {}'.format('on' if self.state == 'down' else 'off')
                    state: 'down' if root.lights else 'normal'
                    on_state: root.lights = True if self.state == 'down' else False

                Button:
                    text: 'Stage'
                    on_release: root.control.activate_next_stage()

                ToggleButton:
                    text: 'Brakes {}'.format('active' if self.state == 'down' else 'released')
                    state: 'down' if root.brakes else 'normal'
                    on_state: root.brakes = True if self.state == 'down' else False

<TelemetryLabel@Label>:
    text_size: self.size
    halign: 'center'

<AutoPilotLayout@BoxLayout>:
    orientation: 'vertical'

    text: ''
    target: ''
    root: None

    Label:
        text: root.text

    FloatLayout:
        AutoPilotInput:
            target: root.target
            root: root.root
